 package com.spring.service;

 import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.spring.model.Academyprof;
import com.spring.model.Anneescolaire;
import com.spring.model.Csvmatiereclasse;
import com.spring.model.ImportError;
import com.spring.model.ImportResult;
import com.spring.model.Matiereclasse;
import com.spring.model.Professeur;
import com.spring.repository.CsvmatiereclasseRepository;
import com.spring.repository.MatiereclasseRepository;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Time;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
 import java.util.Optional;

 /*
    File generated By
    Christooj_Generation_Code
 */
 @Service
 public class CsvmatiereclasseService {
    private final CsvmatiereclasseRepository repo;
     
   @Autowired
   private AnneescolaireService service;

   @Autowired
   private ProfesseurService serviceProf;

   @Autowired
   private AcademyprofService serviceAcProf;


    public void saveDataFile(List<Csvmatiereclasse> csv) {
      repo.saveAll(csv);
   }

   private boolean isRowEmpty(Row row) {
      for (int c = row.getFirstCellNum(); c < row.getLastCellNum(); c++) {
          Cell cell = row.getCell(c);
          if (cell != null && cell.getCellType() != CellType.BLANK) {
              return false;
          }
      }
      return true;
  }

  public ImportResult importExcelFile(MultipartFile file, int idanne, int academyId) throws IOException {
    List<Csvmatiereclasse> list = new ArrayList<>();
    List<ImportError> errors = new ArrayList<>();

    try (InputStream inputStream = file.getInputStream();
        Workbook workbook = new XSSFWorkbook(inputStream)) {

        Sheet sheet = workbook.getSheetAt(0);

        for (Row row : sheet) {
            if (row.getRowNum() == 0) continue; 

            if (isRowEmpty(row)) {
                continue;
            }

            try {
                Csvmatiereclasse csvMatiere = new Csvmatiereclasse();
                csvMatiere.setMatiere(row.getCell(0).getStringCellValue().trim());
                csvMatiere.setCoefficient((int) row.getCell(2).getNumericCellValue());
                csvMatiere.setJour(row.getCell(3).getStringCellValue().trim());

                Cell dd = row.getCell(4);
                double numericValue = dd.getNumericCellValue();

                Cell ff = row.getCell(5);
                double finValue = ff.getNumericCellValue();

                Time debutCours = this.setTimeValue(numericValue);
                Time finCours = this.setTimeValue(finValue);

                csvMatiere.setHeuredebut(debutCours);
                csvMatiere.setHeurefin(finCours);

                csvMatiere.setMatricule(row.getCell(1).getStringCellValue().trim());
                csvMatiere.setIdanneescolaire(idanne);

                Professeur profe = serviceProf.findByMatricule(csvMatiere.getMatricule());

                Academyprof aprof = serviceAcProf.verifyAcademyProf(academyId, profe.getId());

                if (aprof == null) {
                    errors.add(new ImportError(row.getRowNum() + 1, "Professeur introuvable pour la matricule: " + csvMatiere.getMatricule()));
                } else {
                    csvMatiere.setIdprof(aprof.getProfid());
                    list.add(csvMatiere);
                }

            } catch (Exception e) {
                errors.add(new ImportError(row.getRowNum() + 1, "Erreur lors du traitement de la ligne : " + e.getMessage()));
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    ImportResult result = new ImportResult();
    result.setCsvMatiereList(list);
    result.setErrorList(errors);

    return result;
}



    public Time setTimeValue(double timeValue) throws ParseException{
      if (timeValue > 0) {
         int totalSeconds = (int) (timeValue * 86400); 

         int hours = totalSeconds / 3600;
         int minutes = (totalSeconds % 3600) / 60;
         int seconds = totalSeconds % 60;

         String formattedDuree = String.format("%02d:%02d:%02d", hours, minutes, seconds);
         SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");

         java.util.Date date = dateFormat.parse(formattedDuree);

         Time t = new Time(date.getTime());

         return t;
      }

      return null;
    }

    @Autowired
    public CsvmatiereclasseService(CsvmatiereclasseRepository rep) {
        this.repo = rep;
    }


    public Csvmatiereclasse create(Csvmatiereclasse object) {
       return repo.save(object);
   }


    public List<Csvmatiereclasse> read() {
       return repo.findAll();
    }

    public Optional<Csvmatiereclasse> readById(int id) {
       return repo.findById(id);
    }

    public Csvmatiereclasse update(int id, Csvmatiereclasse object) {
       try {

           Optional<Csvmatiereclasse> optional = repo.findById(id);
           if (optional.isPresent()) {
               Csvmatiereclasse existing = optional.get();
               existing = (Csvmatiereclasse) com.spring.utility.Utilitaire.addValueObject(existing,object);
               return repo.save(existing);
           }
       return null;
       }catch(Exception ex){
           ex.printStackTrace();
           return null;
       }
    }

    public void delete(int id) {
       repo.deleteById(id);
    }

    public void clearAllData() {
      repo.truncateCsvmatiereclasse();
   }



}

