 package com.spring.service;

 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;

import com.spring.model.Academyprof;
import com.spring.model.Demandeajoutprof;
import com.spring.model.V_infoprof;
import com.spring.repository.AcademyprofRepository;
import com.spring.repository.DemandeajoutprofRepository;
import com.spring.repository.V_infoprofRepository;
 import java.util.List;
 import java.util.Optional;
import java.util.stream.Collectors;

 /*
    File generated By
    Christooj_Generation_Code
 */
 @Service
 public class V_infoprofService {
    private final V_infoprofRepository repo;
    private final AcademyprofRepository academyprofRepository;
    private final DemandeajoutprofRepository demandeajoutprofRepository;

    @Autowired
    public V_infoprofService(V_infoprofRepository repo, AcademyprofRepository repoA,DemandeajoutprofRepository repoB) {
      this.repo = repo;
      this.academyprofRepository = repoA;
      this.demandeajoutprofRepository = repoB;
   }


   public V_infoprof create(V_infoprof object) {
       return repo.save(object);
   }


   public List<V_infoprof> readAcademyProf(int academyid) {
      List<Demandeajoutprof> listAc = demandeajoutprofRepository.findByIdacademy(academyid);
      List<V_infoprof> listV_info = this.read();

      for (V_infoprof v_infoprof2 : listV_info) {
         List<Demandeajoutprof> academProf = listAc.stream().filter(v_infoprof -> v_infoprof.getIdprof() == v_infoprof2.getIdprofesseur()).collect(Collectors.toList());

         System.out.print("statut  "+academProf.size());
         
         if(academProf.size() > 0){
            v_infoprof2.setStatus(1);
         }else{
            v_infoprof2.setStatus(0);
         }
      }

      
      return listV_info;
   }

    public List<V_infoprof> read() {
      
       return repo.findAll();
    }

    public Optional<V_infoprof> readById(int id) {
       return repo.findById(id);
    }

    public V_infoprof update(int id, V_infoprof object) {
       try {

           Optional<V_infoprof> optional = repo.findById(id);
           if (optional.isPresent()) {
               V_infoprof existing = optional.get();
               existing = (V_infoprof) com.spring.utility.Utilitaire.addValueObject(existing,object);
               return repo.save(existing);
           }
       return null;
       }catch(Exception ex){
           ex.printStackTrace();
           return null;
       }
    }

    public void delete(int id) {
       repo.deleteById(id);
    }



}

