 package com.spring.service;

 import org.apache.poi.ss.usermodel.Cell;
 import org.apache.poi.ss.usermodel.CellType;
 import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.spring.model.Csvmatiereclasse;
import com.spring.model.Csvnoteeleveecole;
import com.spring.model.Noteetudiantecole;
import com.spring.repository.CsvnoteeleveecoleRepository;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
 import java.util.Optional;

 /*
    File generated By
    Christooj_Generation_Code
 */
 @Service
 public class CsvnoteeleveecoleService {
    private final CsvnoteeleveecoleRepository repo;

    public List<Csvnoteeleveecole> importExcelFileNote(MultipartFile file) throws IOException {
   List<Csvnoteeleveecole> list = new ArrayList<>();
   
      try (InputStream inputStream = file.getInputStream();
        Workbook workbook = new XSSFWorkbook(inputStream)) {

       Sheet sheet = workbook.getSheetAt(0);

       for (Row row : sheet) {
           if (row.getRowNum() == 0) continue; 

           if (isRowEmpty(row)) {
               continue;
           }

           try {
               Csvnoteeleveecole note = new Csvnoteeleveecole();
               //System.out.println("ooo   "+row.getCell(0).getStringCellValue().trim()+"   "+(Double) row.getCell(1).getNumericCellValue());
               note.setMatricule(row.getCell(0).getStringCellValue().trim());
               note.setNotes((Double) row.getCell(1).getNumericCellValue());
               list.add(note);
           } catch (Exception e) {
               System.out.println(e.getMessage());
           }
       }
      } catch (Exception e) {
       e.printStackTrace();
      }

      return list;
   }

   private boolean isRowEmpty(Row row) {
      for (int c = row.getFirstCellNum(); c < row.getLastCellNum(); c++) {
          Cell cell = row.getCell(c);
          if (cell != null && cell.getCellType() != CellType.BLANK) {
              return false;
          }
      }
      return true;
  }

   @Autowired
    public CsvnoteeleveecoleService(CsvnoteeleveecoleRepository rep) {
        this.repo = rep;
    }

    public Csvnoteeleveecole create(Csvnoteeleveecole object) {
       return repo.save(object);
   }


    public List<Csvnoteeleveecole> read() {
       return repo.findAll();
    }

    public Optional<Csvnoteeleveecole> readById(int id) {
       return repo.findById(id);
    }

    public Csvnoteeleveecole update(int id, Csvnoteeleveecole object) {
       try {

           Optional<Csvnoteeleveecole> optional = repo.findById(id);
           if (optional.isPresent()) {
               Csvnoteeleveecole existing = optional.get();
               existing = (Csvnoteeleveecole) com.spring.utility.Utilitaire.addValueObject(existing,object);
               return repo.save(existing);
           }
       return null;
       }catch(Exception ex){
           ex.printStackTrace();
           return null;
       }
    }

    public void delete(int id) {
       repo.deleteById(id);
    }

   public void saveDataFile(List<Csvnoteeleveecole> csv) {
      repo.saveAll(csv);
   }

   public void clearAllData() {
    repo.truncateNote();
 }



}

