package com.spring.controller;

import com.spring.model.Academyprof;
import com.spring.model.Academyusers;
import com.spring.model.Users;
import com.spring.service.AcademyprofService;
import com.spring.service.AcademyusersService;
import com.spring.service.TokenService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

/*
   File generated By
   Christooj_Generation_Code
*/
@RestController
@RequestMapping("/Academyprof")
@CrossOrigin("*")
public class AcademyprofController{
   @Autowired
   private AcademyprofService services;

    @Autowired
   private AcademyusersService servicesAc;

   @Autowired
   TokenService servicetoken;

   @GetMapping("/getSomme")
    public int getSomme(@RequestHeader("Authorization") String token) {
        try {
            Users user = servicetoken.getUser(token);
            Academyusers ac = servicesAc.findAcademyId(user.getId());
            int all = services.getNbre(ac.getAcademy_id());
            return all;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }


   @DeleteMapping("/deleteAcademyProf")
    public String delete(@RequestParam int academyid,@RequestParam int profid) {
        try {
            services.remove(academyid, profid);;
            return "Success";
        } catch (Exception e) {
            e.printStackTrace();
           return "Il ya erreur: "+e.getMessage();
        }
    }


   @GetMapping("/getAcademyProf")
    public int getAcademyprofs(@RequestParam int academyid,@RequestParam int profid) {
        try {
            List<Academyprof> all = services.getAcademyProf(academyid,profid);
            return all.size();
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

   @PostMapping("/create")
    public String create(@RequestBody Academyprof object) {
    try {
        services.create(object);
        return "Cr��e avec succ�s";
    } catch (Exception e) {
        e.printStackTrace();
        return "Erreur lors de la cr�ation: " + e.getMessage();
    }
}

   @GetMapping("/find")
    public List<Academyprof> getAll() {
        try {
            List<Academyprof> all = services.read();
            return all;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @GetMapping("/find/{id}")
    public Academyprof getById(@PathVariable int id) {
        try {
            Optional<Academyprof> optional = services.readById(id);
            return  optional.get();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @PutMapping("/update/{id}")
    public Academyprof update(@PathVariable int id, @RequestBody Academyprof object) {
        try {
            System.out.print("updatyyy");
            Academyprof updated = services.update(id,object);
            return updated;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @DeleteMapping("/delete/{id}")
    public String delete(@PathVariable int id) {
        try {
            services.delete(id);
            return "Success";
        } catch (Exception e) {
            e.printStackTrace();
           return "Il ya erreur: "+e.getMessage();
        }
    }


}

