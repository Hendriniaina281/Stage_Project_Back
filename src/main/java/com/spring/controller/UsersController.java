package com.spring.controller;

import com.spring.model.Academyusers;
import com.spring.model.Users;
import com.spring.model.V_demandeprof;
import com.spring.service.TokenService;
import com.spring.service.UsersService;
import com.spring.utility.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

/*
   File generated By
   Christooj_Generation_Code
*/
@RestController
@RequestMapping("/Users")
@CrossOrigin("*")
public class UsersController{
   @Autowired
   private UsersService services;

   @Autowired
   private TokenService servicetoken;

   @GetMapping("/getConnect")
   public Users getConnecting(@RequestHeader("Authorization") String token) {
       try {
            Users user = servicetoken.getUser(token);
            Users users = services.getUserC(user.getId());
           return users;
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }
   }


    @GetMapping("/geIdUser")
    public Users getUserId(@RequestHeader("Authorization") String token) {
        try {
            Users user = servicetoken.getUser(token);
            return user;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }


   @GetMapping("/findByEmail/{email}")
   public Integer getUsersEmail(@PathVariable String email) {
       try {
           Users all = services.getByEmail(email);

            if (all == null) {
                return 0;
            } 

           return all.getId();
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }
   }
   

   @PostMapping("/create")
   public ResponseEntity<?> create(@RequestBody Users object) {
       try {
           Users userId = services.create(object); 
           return ResponseEntity.ok(Collections.singletonMap("id", userId));
       } catch (Exception e) {
           e.printStackTrace();
           return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                   .body(Collections.singletonMap("error", "Erreur lors de la création: " + e.getMessage()));
       }
   }
   
   @GetMapping("/find")
    public List<Users> getAll() {
        try {
            List<Users> all = services.read();
            return all;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @GetMapping("/find/{id}")
    public Users getById(@PathVariable int id) {
        try {
            Optional<Users> optional = services.readById(id);
            return  optional.get();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @PutMapping("/update/{id}")
    public Users update(@PathVariable int id, @RequestBody Users object) {
        try {
            Users updated = services.update(id,object);
            return updated;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @DeleteMapping("/delete/{id}")
    public String delete(@PathVariable int id) {
        try {
            services.delete(id);
            return "Success";
        } catch (Exception e) {
            e.printStackTrace();
           return "Il ya erreur: "+e.getMessage();
        }
    }

    @GetMapping("/profil")
    public ResponseEntity<Response> getProfile(@RequestHeader("Authorization") String authorizationHeader) {
        Response response = new Response();
        try {
            Users etudiant = servicetoken.getUser(authorizationHeader);
            response.setData(etudiant);
            response.setStatus_code("200");
            response.setMessage("Réussi");
            return new ResponseEntity<>(response, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus_code("401");
            response.setMessage(e.getMessage());
            return new ResponseEntity<>(response, HttpStatus.FORBIDDEN);
        }
    }

}

