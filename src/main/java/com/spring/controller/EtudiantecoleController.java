package com.spring.controller;

import com.spring.model.Academyusers;
import com.spring.model.Etudiant;
import com.spring.model.Etudiantecole;
import com.spring.model.Users;
import com.spring.service.AcademyService;
import com.spring.service.AcademyusersService;
import com.spring.service.EtudiantecoleService;
import com.spring.service.TokenService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.Collections;

/*
   File generated By
   Christooj_Generation_Code
*/
@RestController
@RequestMapping("/Etudiantecole")
@CrossOrigin("*")
public class EtudiantecoleController{
   @Autowired
   private EtudiantecoleService services;

   @Autowired
   private AcademyusersService servicesAc;

   @Autowired
   TokenService servicetoken;

   @GetMapping("/getNbre/{idanne}")
   public Integer getAnneeEt(@RequestHeader("Authorization") String token,@PathVariable int idanne) {
       try {
            Users user = servicetoken.getUser(token);
            Academyusers ac = servicesAc.findAcademyId(user.getId());
            Integer all = services.getSum(ac.getAcademy_id(), idanne);
            return all;
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }
   }

   @GetMapping("/getAnneeEtudiant/{idetudiant}")
   public List<Etudiantecole> getAnneeEt(@PathVariable int idetudiant) {
       try {
           List<Etudiantecole> all = services.getAnneeScolaireEtudiant(idetudiant);
           return all;
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }
   }

   
   @GetMapping("/findEtudiantByecole/{idecoleclasse}/{idanne}")
   public List<Etudiantecole> getEtudiant(@PathVariable int idecoleclasse,@PathVariable int idanne) {
       try {
           List<Etudiantecole> all = services.getEtudiant(idecoleclasse,idanne);
           return all;
       } catch (Exception e) {
           e.printStackTrace();
           return null;
       }
   }

   @PostMapping("/create")
public ResponseEntity<?> create(@RequestBody Etudiantecole object) {
    try {
        Etudiantecole userId = services.create(object); 
        return ResponseEntity.ok(Collections.singletonMap("id", userId));
    } catch (Exception e) {
        e.printStackTrace();
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body(Collections.singletonMap("error", "Erreur lors de la cr√©ation: " + e.getMessage()));
    }
}


   @GetMapping("/find")
    public List<Etudiantecole> getAll() {
        try {
            List<Etudiantecole> all = services.read();
            return all;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @GetMapping("/find/{id}")
    public Etudiantecole getById(@PathVariable int id) {
        try {
            Optional<Etudiantecole> optional = services.readById(id);
            return  optional.get();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @PutMapping("/update/{id}")
    public Etudiantecole update(@PathVariable int id, @RequestBody Etudiantecole object) {
        try {
            Etudiantecole updated = services.update(id,object);
            return updated;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @DeleteMapping("/delete/{id}")
    public String delete(@PathVariable int id) {
        try {
            services.delete(id);
            return "Success";
        } catch (Exception e) {
            e.printStackTrace();
           return "Il ya erreur: "+e.getMessage();
        }
    }


}

