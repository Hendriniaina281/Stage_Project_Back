package com.spring.controller;

import com.spring.model.Academy;
import com.spring.model.Academyusers;
import com.spring.model.Csvmatiereclasse;
import com.spring.model.ImportResult;
import com.spring.model.Matiereclasse;
import com.spring.model.Users;
import com.spring.model.V_ecoleclasse;
import com.spring.model.V_horaireprof;
import com.spring.service.AcademyService;
import com.spring.service.AcademyusersService;
import com.spring.service.CsvmatiereclasseService;
import com.spring.service.MatiereclasseService;
import com.spring.service.TokenService;
import com.spring.service.V_ecoleclasseService;
import com.spring.service.V_horaireprofService;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/*
   File generated By
   Christooj_Generation_Code
*/
@RestController
@RequestMapping("/Matiereclasse")
@CrossOrigin("*")
public class MatiereclasseController{
   @Autowired
   private MatiereclasseService services;

   @Autowired
   private CsvmatiereclasseService csvService;

   @Autowired
   private V_horaireprofService horaireServ;

   @Autowired
   private V_ecoleclasseService servicesE;

   
   @Autowired
   private AcademyusersService servicesAc;

   @Autowired
   TokenService servicetoken;

   @Autowired
   private AcademyService servicesAcademy;

   @PostMapping("/insertMatiere")
   public List<String> insertMatiere(@RequestHeader("Authorization") String token,
                                     @RequestParam int ecoleclasse_id,
                                     @RequestParam("file") MultipartFile file,
                                     @RequestParam("idanne") int idanne) throws Exception {
                                           
       List<String> listStr = new ArrayList<>();
       List<String> edt = new ArrayList<>();

        Users user = servicetoken.getUser(token);
        Academyusers ac = servicesAc.findAcademyId(user.getId());
        List<Academy> list = servicesAcademy.findByid(ac.getId());
   
       try { 
           ImportResult result = csvService.importExcelFile(file, idanne, list.get(0).getId());

           if (!result.getErrorList().isEmpty()) {
               for (int i = 0; i < result.getErrorList().size(); i++) {
                   int ligne = result.getErrorList().get(i).getRowNumber();
                   String error = "Erreur à la ligne : " + ligne + ": " + result.getErrorList().get(i).getMessage();
                   listStr.add(error);
               }
               return listStr;
           }
   
           List<Csvmatiereclasse> csv = result.getCsvMatiereList();
           Map<Integer, List<Csvmatiereclasse>> profInfoMap = new HashMap<>();
           Map<Integer, Integer> horaireParProf = new HashMap<>();
   
           for (int i = 0; i < csv.size(); i++) {
               int idProf = csv.get(i).getIdprof();
               List<V_horaireprof> listeHoraire = horaireServ.getHoraireProf(
                   csv.get(i).getJour(), csv.get(i).getHeuredebut(), csv.get(i).getHeurefin(), idProf, idanne
               );
               int size = listeHoraire.size();
   
               if (size > 0) {
                   horaireParProf.put(idProf, horaireParProf.getOrDefault(idProf, 0) + size);
   
                   profInfoMap.putIfAbsent(idProf, new ArrayList<>());
                   profInfoMap.get(idProf).add(csv.get(i));
               }
           }
   
           for (Map.Entry<Integer, Integer> entry : horaireParProf.entrySet()) {
               if (entry.getValue() > 0) {
                   List<Csvmatiereclasse> profInfos = profInfoMap.get(entry.getKey());
                   
                   for (Csvmatiereclasse profInfo : profInfos) {
                       String message = "Le professeur " + profInfo.getMatricule() +
                                        " est pris le " + profInfo.getJour() +
                                        " de " + profInfo.getHeuredebut() +
                                        " à " + profInfo.getHeurefin();
                       edt.add(message);
                   }
               }
           }
   
           if (edt.isEmpty()) {
               csvService.saveDataFile(csv);
               List<V_ecoleclasse> listEc = servicesE.getByEcoleclasseid(ecoleclasse_id);
               //System.out.print("etst   "+listEc.get(0).getAdresse());*/
               services.insertMatiere(ecoleclasse_id,listEc.get(0).getNom(),listEc.get(0).getAdresse(),listEc.get(0).getClasse());
               csvService.clearAllData();
               listStr.add("Importation avec succès");
           } else {
               return edt;
           }
   
           return listStr;
       } catch (Exception e) {
           e.printStackTrace();
           return listStr;
       }
   }

   @PostMapping("/exportNotes")
    public ResponseEntity<byte[]> exportNote(@RequestBody List<Object[]> data) {
    try (Workbook workbook = new XSSFWorkbook()) {
        Sheet sheet = workbook.createSheet("Sheet1");

        Row headerRow = sheet.createRow(0);
        String[] columns = { "Matricule", "Notes"};
        for (int i = 0; i < columns.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columns[i]);
        }

        int rowNum = 1; 
        for (Object[] rowData : data) {
            Row row = sheet.createRow(rowNum++); 
            for (int i = 0; i < rowData.length; i++) {
                Cell cell = row.createCell(i);
                if (rowData[i] instanceof String) {
                    cell.setCellValue((String) rowData[i]);
                } else if (rowData[i] instanceof Integer) {
                    cell.setCellValue("");
                } 
            }
        }

        /*for (int i = 0; i < columns.length; i++) {
            sheet.autoSizeColumn(i);
        }*/

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        workbook.write(out);

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=note.xlsx")
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(out.toByteArray());
    } catch (IOException e) {
        e.printStackTrace();
        return ResponseEntity.status(500).build();
    }
}

   

    @GetMapping("/exportMatiereClasse")
    public ResponseEntity<byte[]> exportExcel() {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Sheet1");
            Row headerRow = sheet.createRow(0);

            String[] columns = {"Matiere", "Matricule", "Coefficient", "Jour","HeureDebut","HeureFin"};
            for (int i = 0; i < columns.length; i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(columns[i]);
            }

            /*for (int i = 0; i < columns.length; i++) {
                sheet.autoSizeColumn(i);
            }*/

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            workbook.write(out);

            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=exportMatiereClasse.xlsx")
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(out.toByteArray());
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(500).build();
        }
    }


   @PostMapping("/create")
    public String create(@RequestBody Matiereclasse object) {
        try {
            services.create(object);
            return "Cr��e avec succ�s";
        } catch (Exception e) {
            e.printStackTrace();
            return "Erreur lors de la cr�ation: " + e.getMessage();
        }
    }

   @GetMapping("/find")
    public List<Matiereclasse> getAll() {
        try {
            List<Matiereclasse> all = services.read();
            return all;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @GetMapping("/find/{id}")
    public Matiereclasse getById(@PathVariable int id) {
        try {
            Optional<Matiereclasse> optional = services.readById(id);
            return  optional.get();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @PutMapping("/update/{id}")
    public Matiereclasse update(@PathVariable int id, @RequestBody Matiereclasse object) {
        try {
            Matiereclasse updated = services.update(id,object);
            return updated;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

   @DeleteMapping("/delete/{id}")
    public String delete(@PathVariable int id) {
        try {
            services.delete(id);
            return "Success";
        } catch (Exception e) {
            e.printStackTrace();
           return "Il ya erreur: "+e.getMessage();
        }
    }


}

